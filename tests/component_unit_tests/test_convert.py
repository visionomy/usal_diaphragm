import unittest 

import numpy as np

from usal_diaphragm.geom import (
    convert, 
    line_circle_intersection,
)


class GeomTest(unittest.TestCase):

    def test_line_circle_intersection(self):
        """Test line-circle intersection"""
        u, v = line_circle_intersection(uv1=(0,0), uv2=(2,0), cu=0, cv=0, r=1)
        self.assertAlmostEqual(u, 1.0)
        self.assertAlmostEqual(v, 0.0)

        u, v = line_circle_intersection(uv1=(0,0), uv2=(2,2), cu=0, cv=0, r=1)
        self.assertAlmostEqual(u, np.sqrt(2)/2)
        self.assertAlmostEqual(v, np.sqrt(2)/2)

        uv1=(496.01612903225805, 228.2927419354839)
        uv2=(312.44153225806446, 121.10389610389612)
        u, v = line_circle_intersection(
            uv1, uv2,
            cu=67.48721912336967, 
            cv=-186.08991510522247 , 
            r=483.69672229118976,
        )
        self.assertTrue(min(uv1[0], uv2[0]) < u < max(uv1[0], uv2[0]))
        self.assertTrue(min(uv1[1], uv2[1]) < v < max(uv1[1], uv2[1]))

class ConvertTest(unittest.TestCase):

    """-"""

    def setUp(self):
        """-"""
        self._vol_props = {
            'dim_i': 752, 
            'dim_j': 112, 
            'dim_k': 43, 
            'offset1': 256.7432567432568, 
            'offset2': -128.0969030969031, 
            'rad_res': 0.0002002, 
            'cartesian_spacing': 0.7, 
            'theta_angles': [
                1.01959119345957, 1.0294896598680516, 1.039389889091117, 1.0492918529070117, 1.0591955228746646, 
                1.0691008703369076, 1.0790078664237381, 1.0889164820556276, 1.0988266879468749, 1.1087384546090058, 
                1.1186517523542132, 1.1285665512988432, 1.138482821366923, 1.148400532293729, 1.1583196536294, 
                1.1682401547425874, 1.1781620048241468, 1.18808517289087, 1.198009627789253, 1.207935338199305,
                1.2178622726383912, 1.227790399465116, 1.2377196868832365, 1.2476501029456168, 1.2575816155582105, 
                1.2675141924840807, 1.2774478013474515, 1.2873824096377882, 1.2973179847139116, 1.3072544938081412, 
                1.3171919040304656, 1.3271301823727426, 1.3370692957129264, 1.3470092108193201, 1.3569498943548535, 
                1.3668913128813867, 1.376833432864034, 1.3867762206755136, 1.3967196426005173, 1.406663664840099, 
                1.4166082535160853, 1.4265533746755035, 1.4364989942950253, 1.4464450782854301, 1.4563915924960822,
                1.46633850271942, 1.4762857746954638, 1.4862333741163298, 1.4961812666307603, 1.506129417848661, 
                1.5160777933456497, 1.5260263586676102, 1.535975079335256, 1.5459239208486983, 1.5558728486920193,
                1.5658218283378484, 1.5757708252519447, 1.5857198048977739, 1.5956687327410948, 1.605617574254537,
                1.615566294922183, 1.6255148602441434, 1.6354632357411318, 1.6454113869590328, 1.6553592794734633, 
                1.6653068788943293, 1.675254150870373, 1.685201061093711, 1.6951475753043628, 1.7050936592947679, 
                1.7150392789142896, 1.7249844000737078, 1.734928988749694, 1.7448730109892758, 1.7548164329142792, 
                1.7647592207257592, 1.7747013407084065, 1.7846427592349396, 1.794583442770473, 1.8045233578768667, 
                1.8144624712170503, 1.8244007495593275, 1.8343381597816517, 1.8442746688758815, 1.854210243952005, 
                1.8641448522423416, 1.8740784611057122, 1.8840110380315827, 1.8939425506441763, 1.9038729667065566, 
                1.913802254124677, 1.9237303809514017, 1.9336573153904881, 1.94358302580054, 1.9535074806989232,
                1.9634306487656463, 1.9733524988472058, 1.9832729999603929, 1.9931921212960642, 2.0031098322228704, 
                2.01302610229095, 2.02294090123558, 2.032854198980787, 2.042765965642918, 2.0526761715341655, 
                2.0625847871660548, 2.0724917832528855, 2.0823971307151283, 2.0923008006827817, 2.1022027644986756, 
                2.1121029937217415, 2.122001460130223,
            ], 
            # 'phi_angles': numpy.linspace(1.9894981191807868, 1.1520945347671756, 43)
            'phi_angles': [
                1.9894981191807868, 1.9695599385995104, 1.9496217580182338, 1.9296835774369574, 1.909745396855681, 
                1.8898072162744044, 1.869869035693128, 1.8499308551118516, 1.8299926745305752, 1.8100544939492986, 
                1.7901163133680222, 1.7701781327867456, 1.7502399522054692, 1.7303017716241929, 1.7103635910429165, 
                1.6904254104616399, 1.6704872298803635, 1.650549049299087, 1.6306108687178105, 1.610672688136534, 
                1.5907345075552577, 1.5707963269739813, 1.5508581463927047, 1.5309199658114283, 1.5109817852301517, 
                1.4910436046488753, 1.471105424067599, 1.4511672434863225, 1.431229062905046, 1.4112908823237695,
                1.391352701742493, 1.3714145211612165, 1.3514763405799401, 1.3315381599986638, 1.3115999794173874, 
                1.2916617988361108, 1.2717236182548344, 1.2517854376735578, 1.2318472570922814, 1.211909076511005, 
                1.1919708959297286, 1.172032715348452, 1.1520945347671756
            ],
        }

        ni = self._vol_props["dim_i"]
        nj = self._vol_props["dim_j"]
        nk = self._vol_props["dim_k"]
    
        # Corners of the volume
        self._ii = [0, 0, 0, 0, ni-1, ni-1, ni-1, ni-1]
        self._jj = [0, 0, nj-1, nj-1, 0, 0, nj-1, nj-1]
        self._kk = [0, nk-1, 0, nk-1, 0, nk-1, 0, nk-1]

        self._xx = [-0.02691891, -0.02691891, 0.02691891, 0.02691891, -0.10565946, -0.10565946, 0.10565946, 0.10565946]
        self._yy = [-0.00737622, 0.00737622, -0.00737622, 0.00737622, -0.0594513, 0.0594513, -0.0594513, 0.0594513]
        self._zz = [0.04222017, 0.04222017, 0.04222017, 0.04222017, 0.15923853, 0.15923853, 0.15923853, 0.15923853]
    
    def test_polar_to_cartesian(self):
        """Test polar to cartesian"""
        xx, yy, zz = convert.to_cartesian(self._ii, self._jj, self._kk, self._vol_props)

        for i in range(len(xx)):
            self.assertAlmostEqual(xx[i], self._xx[i])
            self.assertAlmostEqual(yy[i], self._yy[i])
            self.assertAlmostEqual(zz[i], self._zz[i])

        return

    def test_cartesian_to_polar(self):
        """Test cartesian to polar"""
        ii, jj, kk = convert.to_polar(self._xx, self._yy, self._zz, self._vol_props)

        for i in range(len(ii)):
            self.assertAlmostEqual(ii[i], self._ii[i])
            self.assertAlmostEqual(jj[i], self._jj[i])
            self.assertAlmostEqual(kk[i], self._kk[i])

        return


if __name__ == "__main__":
    unittest.main()
